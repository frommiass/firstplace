#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤ —Å –∑–∞–ø–∏—Å—å—é –ø—Ä–æ–º—Ç–æ–≤ –≤ —Ñ–∞–π–ª—ã –≤–º–µ—Å—Ç–æ GigaChat
"""
import json
import sys
import os
from pathlib import Path
from typing import List, Dict, Any

# –û—Ç–∫–ª—é—á–∞–µ–º GPU –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
os.environ['CUDA_VISIBLE_DEVICES'] = ''
print("üîß GPU –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã")

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('src')

from submit.interfaces import Message
from submit.model_inference import SubmitModelWithMemory

def load_dialogues_from_json(file_path: str) -> List[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∏–∞–ª–æ–≥–∏ –∏–∑ JSONL —Ñ–∞–π–ª–∞."""
    dialogues = []
    
    with open(file_path, 'r', encoding='utf-8') as f:
        for line_num, line in enumerate(f, 1):
            line = line.strip()
            if not line:
                continue
            
            try:
                data = json.loads(line)
                if isinstance(data, dict) and 'question' in data and 'sessions' in data:
                    dialogues.append(data)
            except json.JSONDecodeError as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ {line_num}: {e}")
                continue


    print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(dialogues)} –¥–∏–∞–ª–æ–≥–æ–≤")
    return dialogues

def convert_to_messages(dialogue_messages: List[Dict]) -> List[Message]:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –≤ –æ–±—ä–µ–∫—Ç—ã Message."""
    messages = []
    for msg in dialogue_messages:
        message = Message(
            content=msg.get('content', ''),
            role=msg.get('role', 'user'),
            session_id=str(msg.get('session_id', 'unknown'))
        )
        messages.append(message)
    
    return messages

class PromptCaptureModel(SubmitModelWithMemory):
    """–ú–æ–¥–µ–ª—å —Å –∑–∞—Ö–≤–∞—Ç–æ–º –ø—Ä–æ–º—Ç–æ–≤ –≤–º–µ—Å—Ç–æ –∏—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ GigaChat"""
    
    def __init__(self, model_path: str, weights_dir: str = "./weights", prompt_dir: str = "./output_prompts"):
        super().__init__(model_path, weights_dir)
        self.prompt_dir = Path(prompt_dir)
        self.prompt_dir.mkdir(exist_ok=True)
        self.prompt_counter = 0
    
    def get_answer_builder(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AnswerBuilder –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–º—Ç—ã"""
        from submit.answer_builder import AnswerBuilder
        return PromptCaptureAnswerBuilder(None, self.prompt_dir)

class PromptCaptureAnswerBuilder:
    """–ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–º—Ç—ã –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ GigaChat"""
    
    def __init__(self, gigachat_model, prompt_dir: Path):
        self.gigachat = gigachat_model
        self.prompt_dir = prompt_dir
        self.prompt_counter = 0
    
    def generate_answer(self, question: str, search_results, dialogue_id: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –∑–∞—Ö–≤–∞—Ç–æ–º –ø—Ä–æ–º—Ç–∞"""
        from submit.interfaces import SearchResult
        from submit.answer_builder import NO_INFO_THRESHOLD
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ NO_INFO
        if self._is_no_info(search_results):
            answer = "–≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ —É–ø–æ–º–∏–Ω–∞–ª–∞—Å—å –≤ –¥–∏–∞–ª–æ–≥–µ."
            return answer
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞  
        context = self._prepare_context(search_results)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º—Ç–∞
        prompt = self._build_prompt(question, context)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º—Ç–∞ –≤ —Ñ–∞–π–ª
        prompt_file = self.prompt_dir / f"prompt_{dialogue_id}_{self.prompt_counter}.txt"
        with open(prompt_file, 'w', encoding='utf-8') as f:
            f.write(prompt)
        
        self.prompt_counter += 1
        print(f"üìù –ü—Ä–æ–º—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {prompt_file}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        return f"–ü—Ä–æ–º—Ç –∑–∞–ø–∏—Å–∞–Ω –≤ —Ñ–∞–π–ª {prompt_file}"
    
    def _is_no_info(self, results):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        if not results:
            return True
        
        best_score = results[0].final_score
        return best_score < NO_INFO_THRESHOLD
        
    def _prepare_context(self, results):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        context_items = []
        seen = set()
        
        for result in results[:5]:
            original_text = result.chunk.original_user or result.chunk.content
            
            normalized = original_text.lower().strip()
            
            if normalized not in seen and len(context_items) < 5:
                index = 0
                if result.chunk.metadata:
                    index = result.chunk.metadata.get('index', 0)
                
                context_items.append(f"[#{index}] {original_text}")
                seen.add(normalized)
        
        return "\n".join(context_items)
    
    def _build_prompt(self, question: str, context: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º—Ç–∞"""
        prompt = f"""–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –¥–∏–∞–ª–æ–≥–∞:
{context}

–ü–†–ê–í–ò–õ–ê:
1. –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã—à–µ
2. –ü—Ä–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è—Ö - –±–µ—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ë–û–õ–¨–®–ò–ú –∏–Ω–¥–µ–∫—Å–æ–º [#N]
3. –û—Ç–≤–µ—Ç—å –ö–†–ê–¢–ö–û –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º (–º–∞–∫—Å. 15 —Å–ª–æ–≤)
4. –ë–ï–ó –≤–≤–æ–¥–Ω—ã—Ö —Ñ—Ä–∞–∑: "–°–æ–≥–ª–∞—Å–Ω–æ", "–ù–∞ –æ—Å–Ω–æ–≤–µ", "–ò–∑ –¥–∏–∞–ª–æ–≥–∞"
5. –ù–∞—á–∏–Ω–∞–π —Å—Ä–∞–∑—É —Å —Å—É—Ç–∏
6. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç - "–≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ —É–ø–æ–º–∏–Ω–∞–ª–∞—Å—å –≤ –¥–∏–∞–ª–æ–≥–µ."

–ü–†–ò–ú–ï–†–´:
–í–æ–ø—Ä–æ—Å: –°–∫–æ–ª—å–∫–æ –º–Ω–µ –ª–µ—Ç?
–û—Ç–≤–µ—Ç: –í–∞–º 31 –≥–æ–¥.

–í–æ–ø—Ä–æ—Å: –ì–¥–µ —è –∂–∏–≤—É?
–û—Ç–≤–µ—Ç: –í—ã –∂–∏–≤–µ—Ç–µ –≤ –ú–æ—Å–∫–≤–µ.

–í–û–ü–†–û–°: {question}
–û–¢–í–ï–¢:"""
        
        return prompt

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    print("üöÄ –°–ö–†–ò–ü–¢ –° –ó–ê–•–í–ê–¢–û–ú –ü–†–û–ú–¢–û–í")
    print("=" * 60)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    input_file = "data/format_example.jsonl"
    output_dir = Path("output_simple")
    prompt_dir = Path("output_prompts")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    output_dir.mkdir(exist_ok=True)
    prompt_dir.mkdir(exist_ok=True)
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {output_dir}")
    print(f"üìÅ –ü—Ä–æ–º—Ç—ã: {prompt_dir}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
    if not os.path.exists(input_file):
        print(f"‚ùå –§–∞–π–ª {input_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∞–ª–æ–≥–∏
    print(f"\nüìñ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤...")
    dialogues = load_dialogues_from_json(input_file)
    
    if not dialogues:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∏–∞–ª–æ–≥–∏!")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ —Å –∑–∞—Ö–≤–∞—Ç–æ–º –ø—Ä–æ–º—Ç–æ–≤
    print(f"\nü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ —Å –∑–∞—Ö–≤–∞—Ç–æ–º –ø—Ä–æ–º—Ç–æ–≤...")
    model = PromptCaptureModel(
        model_path="dummy_path",
        weights_dir="src/submit/weights",
        prompt_dir=prompt_dir
    )
    print("‚úì –ú–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 4 –¥–∏–∞–ª–æ–≥–∞
    dialogues_to_process = dialogues[:4]
    print(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(dialogues_to_process)} –¥–∏–∞–ª–æ–≥–æ–≤...")
    
    for i, dialogue in enumerate(dialogues_to_process, 1):
        print(f"\n{'='*60}")
        print(f"–î–ò–ê–õ–û–ì {i}/{len(dialogues_to_process)}: {dialogue['id']}")
        print(f"{'='*60}")
        
        dialogue_id = dialogue['id']
        question = dialogue['question']
        correct_answer = dialogue['ans']
        
        print(f"–í–æ–ø—Ä–æ—Å: {question}")
        print(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")
        
        try:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–∞–º—è—Ç—å
            print(f"\n[1/3] –ó–∞–ø–∏—Å—å –≤ –ø–∞–º—è—Ç—å...")
            total_messages = 0
            
            for session in dialogue['sessions']:
                messages = convert_to_messages(session['messages'])
                model.write_to_memory(messages, dialogue_id)
                total_messages += len(messages)
            
            print(f"‚úì –ó–∞–ø–∏—Å–∞–Ω–æ {total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –ü–æ–∏—Å–∫
            print(f"\n[2/3] –ü–æ–∏—Å–∫...")
            search_results = model.search_engine.search(
                question=question,
                dialogue_id=dialogue_id,
                top_k=10
            )
            
            print(f"‚úì –ù–∞–π–¥–µ–Ω–æ {len(search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if search_results:
                print(f"\nüìã –¢–æ–ø-3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
                for j, result in enumerate(search_results[:3], 1):
                    print(f"   {j}. Score: {result.final_score:.3f}")
                    print(f"      Content: {result.chunk.content[:80]}...")
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ (—Å –∑–∞—Ö–≤–∞—Ç–æ–º –ø—Ä–æ–º—Ç–∞)
            print(f"\n[3/3] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ (—Å –∑–∞—Ö–≤–∞—Ç–æ–º –ø—Ä–æ–º—Ç–∞)...")
            try:
                generated_answer = model.answer_to_question(dialogue_id, question)
                print(f"‚úì –û—Ç–≤–µ—Ç: {generated_answer}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
                generated_answer = f"–û—à–∏–±–∫–∞: {e}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_text = f"–î–∏–∞–ª–æ–≥ {dialogue_id}:\n"
            result_text += f"–í–æ–ø—Ä–æ—Å: {question}\n"
            result_text += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}\n"
            result_text += f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {generated_answer}\n"
            result_text += f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(search_results)}\n\n"
            
            if search_results:
                result_text += "–¢–û–ü-10 –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:\n"
                for j, result in enumerate(search_results[:10], 1):
                    result_text += f"{j}. Score: {result.final_score:.3f}\n"
                    result_text += f"   Content: {result.chunk.content[:100]}...\n\n"
            
            output_file = output_dir / f"dialogue_{dialogue_id}_simple.txt"
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(result_text)
            
            print(f"‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
            
            # –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
            print(f"\nüßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏...")
            model.clear_memory(dialogue_id)
            print(f"‚úì –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞ {dialogue_id}: {e}")
            import traceback
            traceback.print_exc()
    
    print(f"\nüéâ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤: {output_dir}")
    print(f"üìù –ü—Ä–æ–º—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {prompt_dir}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    print(f"\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º—Ç—ã:")
    for prompt_file in sorted(prompt_dir.glob("*.txt")):
        print(f"   {prompt_file.name}")

if __name__ == "__main__":
    main()
