"""
–£–ü–†–û–©–ï–ù–ù–´–ô –≥–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å - –¢–û–õ–¨–ö–û –í–ï–°–ê!

–ê–†–•–ò–¢–ï–ö–¢–£–†–ê (3 –º–æ–¥—É–ª—è):
1. DataProcessor - –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ (–ò–°–ü–†–ê–í–õ–ï–ù: –Ω–µ—Ç —É—Ç–µ—á–µ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤)
2. SearchEngine - –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –í–ï–°–ê (—ç–º–±–µ–¥–¥–∏–Ω–≥–∏ + FAISS + reranker)
3. AnswerBuilder - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –í–ï–°–ê (GigaChat)

–ò–°–ü–†–ê–í–õ–ï–ù–û:
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ DataProcessor.executor
‚úÖ Cleanup –≤ __del__
‚úÖ Graceful shutdown –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
"""

from collections import defaultdict
from typing import List, Dict
import time
import numpy as np
import torch

# –£—Å–ª–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
try:
    from transformers import AutoTokenizer
    from vllm import LLM, SamplingParams
except ImportError:
    AutoTokenizer = None
    LLM = None
    SamplingParams = None

from .interfaces import Message

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
from .data_processor import DataProcessor
from .search_engine import SearchEngine
from .answer_builder import AnswerBuilder


class SubmitModelWithMemory:
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ä–µ—à–µ–Ω–∏—è - –£–ü–†–û–©–ï–ù–ù–ê–Ø –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞.
    
    –ú–æ–¥—É–ª–∏:
    1. DataProcessor - –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥
    2. SearchEngine - –ø–æ–∏—Å–∫ (–í–°–Ø –ú–ê–ì–ò–Ø —á–µ—Ä–µ–∑ –≤–µ—Å–∞!)
    3. AnswerBuilder - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (GigaChat)
    """
    
    def __init__(self, model_path: str, weights_dir: str = "./weights") -> None:
        print("\n" + "="*80)
        print("üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ (–£–ü–†–û–©–ï–ù–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê)")
        print("="*80)
        
        self.model_path = model_path
        self.weights_dir = weights_dir
        init_start = time.time()
        
        # –§–ª–∞–≥ –¥–ª—è cleanup
        self._initialized = False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–º—è–≥–∫–∞—è - —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)
        if AutoTokenizer is None or LLM is None:
            print("‚ö†Ô∏è  vllm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ GigaChat")
        
        # ====================================================================
        # –®–ê–ì 1: GigaChat (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        # ====================================================================
        print("\n[1/4] –ó–∞–≥—Ä—É–∑–∫–∞ GigaChat...")
        gigachat_start = time.time()
        
        self.model = None
        self.tokenizer = None
        
        if AutoTokenizer is not None and LLM is not None:
            try:
                self.tokenizer = AutoTokenizer.from_pretrained(
                    self.model_path,
                    trust_remote_code=True,
                    local_files_only=True
                )
                
                self.model = LLM(
                    model=self.model_path,
                    trust_remote_code=True,
                    tensor_parallel_size=1,
                    gpu_memory_utilization=0.6,
                    max_model_len=131072,
                    disable_log_stats=True
                )
                
                self.model.get_tokenizer = lambda: self.tokenizer
                print(f"‚úì GigaChat –∑–∞–≥—Ä—É–∂–µ–Ω ({time.time() - gigachat_start:.1f}s)")
                
            except Exception as e:
                print(f"‚ö†Ô∏è  GigaChat –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω: {e}")
                print(f"    –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ GigaChat...")
                self.model = None
        else:
            print(f"‚ö†Ô∏è  GigaChat –ø—Ä–æ–ø—É—â–µ–Ω (–Ω–µ—Ç vllm)")
        
        # ====================================================================
        # –®–ê–ì 2: DataProcessor (–ø—Ä–æ—Å—Ç–æ–π)
        # ====================================================================
        print("\n[2/4] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DataProcessor...")
        processor_start = time.time()
        
        self.data_processor = DataProcessor(max_workers=16)
        print(f"‚úì DataProcessor –≥–æ—Ç–æ–≤ ({time.time() - processor_start:.1f}s)")
        
        # ====================================================================
        # –®–ê–ì 3: SearchEngine (–í–°–Ø –ú–ê–ì–ò–Ø!)
        # ====================================================================
        print("\n[3/4] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SearchEngine...")
        print("    –ó–∞–≥—Ä—É–∑–∫–∞: 3 —ç–º–±–µ–¥–¥–µ—Ä–∞ + reranker...")
        search_start = time.time()
        
        self.search_engine = SearchEngine(
            weights_dir=weights_dir,
            cache_dir="./cache"
        )
        
        print(f"‚úì SearchEngine –≥–æ—Ç–æ–≤ ({time.time() - search_start:.1f}s)")
        print(f"    –≠–º–±–µ–¥–¥–µ—Ä—ã: fast/quality/best")
        
        # ====================================================================
        # –®–ê–ì 4: AnswerBuilder
        # ====================================================================
        print("\n[4/4] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AnswerBuilder...")
        builder_start = time.time()
        
        self.answer_builder = AnswerBuilder(gigachat_model=self.model)
        print(f"‚úì AnswerBuilder –≥–æ—Ç–æ–≤ ({time.time() - builder_start:.1f}s)")
        
        # ====================================================================
        # –ë—É—Ñ–µ—Ä—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        # ====================================================================
        self.write_buffer: Dict[str, List[List[Message]]] = defaultdict(list)
        self.buffer_size = 50
        self.last_flush_time: Dict[str, float] = {}
        
        self.stats = {
            'init_time': time.time() - init_start,
            'write_calls': 0,
            'batch_flushes': 0,
            'questions_answered': 0,
            'total_answer_time': 0.0,
            'errors': 0,
        }
        
        self.timings = {
            'search': [],
            'generation': [],
            'total': []
        }
        
        self._initialized = True
        
        print("\n" + "="*80)
        print(f"‚úÖ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê: {self.stats['init_time']:.1f}s")
        print("="*80)
        print(f"–ú–æ–¥—É–ª–∏: DataProcessor + SearchEngine (–≤–µ—Å–∞!) + AnswerBuilder (–≤–µ—Å–∞!)")
        if torch and torch.cuda.is_available():
            print(f"GPU: {torch.cuda.memory_allocated() / 1e9:.2f}GB")
        else:
            print(f"GPU: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("="*80 + "\n")
    
    # ========================================================================
    # WRITE TO MEMORY
    # ========================================================================

    def write_to_memory(self, messages: List[Message], dialogue_id: str) -> None:
        """–ó–∞–ø–∏—Å—å –≤ –ø–∞–º—è—Ç—å —Å –±–∞—Ç—á–∏–Ω–≥–æ–º"""
        self.stats['write_calls'] += 1
        self.write_buffer[dialogue_id].append(messages)
        
        if dialogue_id not in self.last_flush_time:
            self.last_flush_time[dialogue_id] = time.time()
        
        # Flush –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏
        should_flush = (
            len(self.write_buffer[dialogue_id]) >= self.buffer_size or
            time.time() - self.last_flush_time[dialogue_id] > 10.0
        )
        
        if should_flush:
            self._flush_buffer(dialogue_id)
    
    def _flush_buffer(self, dialogue_id: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–û: –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —á–∞–Ω–∫–∏!"""
        if not self.write_buffer[dialogue_id]:
            return
        
        flush_start = time.time()
        batch_size = len(self.write_buffer[dialogue_id])
        
        try:
            messages_batch = self.write_buffer[dialogue_id]
            dialogue_ids = [dialogue_id] * batch_size
            
            # –ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥
            processed_batch = self.data_processor.process_messages_batch(
                messages_batch, dialogue_ids
            )
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–±–∏—Ä–∞–µ–º –í–°–ï —á–∞–Ω–∫–∏ –∏–∑ –≤—Å–µ—Ö processed —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            all_chunks = []
            for processed in processed_batch:
                if processed.chunks:
                    all_chunks.extend(processed.chunks)
            
            # –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –û–î–ò–ù –†–ê–ó —Å–æ –≤—Å–µ–º–∏ —á–∞–Ω–∫–∞–º–∏
            if all_chunks:
                self.search_engine.build_index(all_chunks, dialogue_id)
            
            self.write_buffer[dialogue_id] = []
            self.last_flush_time[dialogue_id] = time.time()
            self.stats['batch_flushes'] += 1
            
            if self.stats['batch_flushes'] % 10 == 0:
                flush_time = time.time() - flush_start
                chunks_count = len(all_chunks)
                print(f"[Flush] –ë–∞—Ç—á #{self.stats['batch_flushes']}: "
                      f"{batch_size} —Å–æ–æ–±—â–µ–Ω–∏–π, {chunks_count} —á–∞–Ω–∫–æ–≤ –∑–∞ {flush_time:.2f}s")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ flush: {e}")
            self.stats['errors'] += 1
            self.write_buffer[dialogue_id] = []

    def clear_memory(self, dialogue_id: str) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏"""
        if dialogue_id in self.write_buffer and self.write_buffer[dialogue_id]:
            self._flush_buffer(dialogue_id)
        
        if dialogue_id in self.write_buffer:
            del self.write_buffer[dialogue_id]
        if dialogue_id in self.last_flush_time:
            del self.last_flush_time[dialogue_id]
    
    # ========================================================================
    # ANSWER TO QUESTION (–£–ü–†–û–©–ï–ù–ù–´–ô –ü–ê–ô–ü–õ–ê–ô–ù!)
    # ========================================================================

    def answer_to_question(self, dialogue_id: str, question: str) -> str:
        """
        –£–ü–†–û–©–ï–ù–ù–´–ô –ø–∞–π–ø–ª–∞–π–Ω:
        
        1. Flush –±—É—Ñ–µ—Ä–∞
        2. –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ SearchEngine (–í–ï–°–ê: —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ + reranker)
        3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ AnswerBuilder (–í–ï–°–ê: GigaChat)
        
        –ë–ï–ó –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò! –í—Å—ë —á–µ—Ä–µ–∑ –≤–µ—Å–∞!
        """
        total_start = time.time()
        
        try:
            # 1. Flush –±—É—Ñ–µ—Ä–∞
            if dialogue_id in self.write_buffer and self.write_buffer[dialogue_id]:
                self._flush_buffer(dialogue_id)
            
            # ============================================================
            # 2. –ü–û–ò–°–ö –ß–ï–†–ï–ó –í–ï–°–ê (—ç–º–±–µ–¥–¥–∏–Ω–≥–∏ + FAISS + BM25 + reranker)
            # ============================================================
            search_start = time.time()
            
            search_results = self.search_engine.search(
                question=question,
                dialogue_id=dialogue_id,
                top_k=50  # –¢–æ–ø-50 –ø–æ—Å–ª–µ reranker
            )
            
            search_time = time.time() - search_start
            self.timings['search'].append(search_time)
            
            # ============================================================
            # 3. –ì–ï–ù–ï–†–ê–¶–ò–Ø –ß–ï–†–ï–ó GIGACHAT (–≤–µ—Å–∞)
            # ============================================================
            generation_start = time.time()
            
            answer = self.answer_builder.generate_answer(
                question=question,
                search_results=search_results,
                dialogue_id=dialogue_id
            )
            
            generation_time = time.time() - generation_start
            self.timings['generation'].append(generation_time)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_time = time.time() - total_start
            self.timings['total'].append(total_time)
            
            self.stats['questions_answered'] += 1
            self.stats['total_answer_time'] += total_time
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 50 –≤–æ–ø—Ä–æ—Å–æ–≤
            if self.stats['questions_answered'] % 50 == 0:
                self._print_progress()
            
            return answer

        except Exception as e:
            print(f"\n‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ:")
            print(f"   –í–æ–ø—Ä–æ—Å: {question[:100]}...")
            print(f"   –û—à–∏–±–∫–∞: {e}")
            self.stats['errors'] += 1
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –≤ –¥–∏–∞–ª–æ–≥–µ."
    
    # ========================================================================
    # –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    # ========================================================================
    
    def _print_progress(self) -> None:
        """–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        answered = self.stats['questions_answered']
        total = 1167
        progress = (answered / total) * 100
        
        avg_total = np.mean(self.timings['total'][-50:]) if self.timings['total'] else 0
        avg_search = np.mean(self.timings['search'][-50:]) if self.timings['search'] else 0
        avg_gen = np.mean(self.timings['generation'][-50:]) if self.timings['generation'] else 0
        
        remaining = total - answered
        eta_minutes = (remaining * avg_total) / 60
        
        print(f"\n{'='*80}")
        print(f"üìä –ü–†–û–ì–†–ï–°–°: {answered}/{total} ({progress:.1f}%)")
        print(f"{'='*80}")
        print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_total:.2f}s")
        print(f"  ‚îú‚îÄ –ü–æ–∏—Å–∫ (–≤–µ—Å–∞):     {avg_search:.3f}s")
        print(f"  ‚îî‚îÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è (–≤–µ—Å–∞): {avg_gen:.3f}s")
        print(f"\nETA: ~{eta_minutes:.1f} –º–∏–Ω—É—Ç")
        print(f"–û—à–∏–±–æ–∫: {self.stats['errors']}")
        
        # –ö—ç—à
        hit_rate = self.search_engine.embedding_cache.get_hit_rate()
        print(f"–ö—ç—à —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {hit_rate*100:.1f}% hit rate")
        print(f"{'='*80}\n")
    
    def print_final_stats(self) -> None:
        """–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        print("\n" + "="*80)
        print("üìà –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("="*80)
        
        avg_time = self.stats['total_answer_time'] / max(1, self.stats['questions_answered'])
        
        print(f"\n‚è±Ô∏è  –í–†–ï–ú–Ø:")
        print(f"  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {self.stats['init_time']:.1f}s")
        print(f"  –û–±—â–µ–µ:         {self.stats['total_answer_time']:.1f}s")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ:       {avg_time:.2f}s/–≤–æ–ø—Ä–æ—Å")
        
        if self.timings['search']:
            print(f"\nüìä –≠–¢–ê–ü–´ (—Å—Ä–µ–¥–Ω–µ–µ):")
            print(f"  –ü–æ–∏—Å–∫:     {np.mean(self.timings['search']):.3f}s")
            print(f"  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: {np.mean(self.timings['generation']):.3f}s")
        
        print(f"\nüìù –û–ë–†–ê–ë–û–¢–ö–ê:")
        print(f"  write_to_memory: {self.stats['write_calls']} –≤—ã–∑–æ–≤–æ–≤")
        print(f"  –ë–∞—Ç—á–µ–π:          {self.stats['batch_flushes']}")
        print(f"  –í–æ–ø—Ä–æ—Å–æ–≤:        {self.stats['questions_answered']}")
        print(f"  –û—à–∏–±–æ–∫:          {self.stats['errors']}")
        
        hit_rate = self.search_engine.embedding_cache.get_hit_rate()
        print(f"\nüíæ –ö–≠–®:")
        print(f"  Hit rate: {hit_rate*100:.1f}%")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ DataProcessor
        if hasattr(self.data_processor, 'get_stats'):
            dp_stats = self.data_processor.get_stats()
            print(f"\nüì¶ DATAPROCESSOR:")
            print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {dp_stats['total_processed']}")
            print(f"  –ß–∞–Ω–∫–æ–≤: {dp_stats['total_chunks']}")
            print(f"  –û—à–∏–±–æ–∫: {dp_stats['errors']}")
        
        print(f"\nüíæ GPU:")
        if torch and torch.cuda.is_available():
            print(f"  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {torch.cuda.memory_allocated() / 1e9:.2f}GB")
        else:
            print(f"  –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("\n" + "="*80 + "\n")
    
    def shutdown(self):
        """
        –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.
        
        –í–ê–ñ–ù–û: –í—ã–∑—ã–≤–∞—Ç—å –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏!
        """
        if not self._initialized:
            return
        
        print("\nüßπ –ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º DataProcessor
        if hasattr(self, 'data_processor'):
            try:
                self.data_processor.shutdown()
                print("‚úì DataProcessor –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è DataProcessor: {e}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if hasattr(self, 'stats'):
            self.print_final_stats()
        
        self._initialized = False
        print("‚úì –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã\n")
    
    def __del__(self):
        """Cleanup –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞"""
        self.shutdown()