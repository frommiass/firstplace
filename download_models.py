"""
–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –í–°–ï–• –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ—Ñ–ª–∞–π–Ω-—Ä–∞–±–æ—Ç—ã
"""
from sentence_transformers import SentenceTransformer, CrossEncoder
import os

# –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
SAVE_DIR = "./src/submit/weights"
os.makedirs(SAVE_DIR, exist_ok=True)

print("="*80)
print("üì• –°–ö–ê–ß–ò–í–ê–ù–ò–ï –ú–û–î–ï–õ–ï–ô")
print("="*80)

# =============================================================================
# 1. –≠–ú–ë–ï–î–î–ï–†–´
# =============================================================================
embedders = [
    ('intfloat/multilingual-e5-small', 'multilingual-e5-small'),
    ('sentence-transformers/paraphrase-multilingual-mpnet-base-v2', 'paraphrase-multilingual-mpnet'),
    ('cointegrated/rubert-tiny2', 'rubert-tiny2')
]

print("\n[1/2] –≠–º–±–µ–¥–¥–µ—Ä—ã...")
for hub_name, folder_name in embedders:
    print(f"\n  üì¶ {hub_name}")
    try:
        model = SentenceTransformer(hub_name)
        save_path = os.path.join(SAVE_DIR, folder_name)
        model.save(save_path)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        files = os.listdir(save_path)
        has_modules = 'modules.json' in files
        has_config = 'config_sentence_transformers.json' in files
        has_weights = any('model' in f for f in files)
        
        if has_modules and has_config and has_weights:
            print(f"  ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {folder_name}/ ({len(files)} —Ñ–∞–π–ª–æ–≤)")
        else:
            print(f"  ‚ö†Ô∏è  –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –Ω–æ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º—ã:")
            print(f"      modules.json: {has_modules}")
            print(f"      config_sentence_transformers.json: {has_config}")
            print(f"      –≤–µ—Å–∞: {has_weights}")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")

# =============================================================================
# 2. RERANKER
# =============================================================================
print("\n[2/2] Reranker...")
print(f"\n  üì¶ BAAI/bge-reranker-base")

try:
    reranker = CrossEncoder('BAAI/bge-reranker-base', max_length=512, num_labels=1)
    save_path = os.path.join(SAVE_DIR, 'bge-reranker-base')
    reranker.save(save_path)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞
    files = os.listdir(save_path)
    has_config = 'config.json' in files
    has_weights = any('model' in f for f in files)
    
    if has_config and has_weights:
        print(f"  ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ bge-reranker-base/ ({len(files)} —Ñ–∞–π–ª–æ–≤)")
    else:
        print(f"  ‚ö†Ô∏è  –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –Ω–æ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º—ã:")
        print(f"      config.json: {has_config}")
        print(f"      –≤–µ—Å–∞: {has_weights}")
        
except Exception as e:
    print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")

# =============================================================================
# 3. –ü–†–û–í–ï–†–ö–ê
# =============================================================================
print("\n" + "="*80)
print("üîç –ü–†–û–í–ï–†–ö–ê –ó–ê–ì–†–£–ñ–ï–ù–ù–´–• –ú–û–î–ï–õ–ï–ô")
print("="*80)

print("\n[–¢–µ—Å—Ç 1] –≠–º–±–µ–¥–¥–µ—Ä—ã...")
for _, folder_name in embedders:
    try:
        model = SentenceTransformer(os.path.join(SAVE_DIR, folder_name))
        emb = model.encode(["—Ç–µ—Å—Ç"], show_progress_bar=False)
        print(f"  ‚úÖ {folder_name}: {emb.shape}")
    except Exception as e:
        print(f"  ‚ùå {folder_name}: {e}")

print("\n[–¢–µ—Å—Ç 2] Reranker...")
try:
    reranker = CrossEncoder(os.path.join(SAVE_DIR, 'bge-reranker-base'), num_labels=1)
    score = reranker.predict([["–≤–æ–ø—Ä–æ—Å", "–æ—Ç–≤–µ—Ç"]], show_progress_bar=False)
    print(f"  ‚úÖ bge-reranker-base: score={score[0]:.4f}")
except Exception as e:
    print(f"  ‚ùå bge-reranker-base: {e}")

print("\n" + "="*80)
print("‚úÖ –ì–û–¢–û–í–û!")
print("="*80)
print(f"\n–ú–æ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {SAVE_DIR}/")
print("\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —É–ø–∞–∫–æ–≤—ã–≤–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –æ–±–ª–∞–∫–æ!")
