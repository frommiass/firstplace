#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞.

–§—É–Ω–∫—Ü–∏–∏:
1. –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∏–∞–ª–æ–≥–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞
2. –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∫–∞–∂–¥—ã–π –¥–∏–∞–ª–æ–≥ —á–µ—Ä–µ–∑ SubmitModelWithMemory.write_to_memory()
3. –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–æ–º–ø—Ç—ã —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ extract()
4. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–º–ø—Ç—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
5. –û—á–∏—â–∞–µ—Ç –ø–∞–º—è—Ç—å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞

–ë–ï–ó –í–´–ó–û–í–ê GIGACHAT!
"""

import json
import sys
import os
from pathlib import Path
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('src')

from submit.interfaces import Message
from submit.model_inference import SubmitModelWithMemory
from submit.data_processor import DataProcessor
from submit.search_engine import SearchEngine


def load_dialogues_from_json(file_path: str) -> List[Dict[str, Any]]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∏–∞–ª–æ–≥–∏ –∏–∑ JSONL —Ñ–∞–π–ª–∞.
    
    Args:
        file_path: –ü—É—Ç—å –∫ JSONL —Ñ–∞–π–ª—É
        
    Returns:
        –°–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
    """
    try:
        dialogues = []
        
        with open(file_path, 'r', encoding='utf-8') as f:
            for line_num, line in enumerate(f, 1):
                line = line.strip()
                if not line:
                    continue
                
                try:
                    data = json.loads(line)
                    
                    # –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ - —ç—Ç–æ –æ–¥–∏–Ω –¥–∏–∞–ª–æ–≥ —Å –≤–æ–ø—Ä–æ—Å–æ–º
                    if isinstance(data, dict) and 'question' in data and 'sessions' in data:
                        dialogues.append({
                            'id': data['id'],
                            'question': data['question'],
                            'answer': data['ans'],
                            'question_type': data['question_type'],
                            'sessions': data['sessions'],
                            'ans_session_ids': data.get('ans_session_ids', [])
                        })
                        
                except json.JSONDecodeError as e:
                    print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ {line_num}: {e}")
                    continue
        
        print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(dialogues)} –¥–∏–∞–ª–æ–≥–æ–≤")
        return dialogues
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return []


def convert_to_messages(dialogue_messages: List[Dict]) -> List[Message]:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –≤ –æ–±—ä–µ–∫—Ç—ã Message.
    
    Args:
        dialogue_messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ JSON
        
    Returns:
        –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Message
    """
    messages = []
    for msg in dialogue_messages:
        message = Message(
            content=msg.get('content', ''),
            role=msg.get('role', 'user'),
            session_id=str(msg.get('session_id', 'unknown'))
        )
        messages.append(message)
    
    return messages


def process_dialogue(model, dialogue: Dict[str, Any], 
                    output_dir: Path) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –¥–∏–∞–ª–æ–≥ —Å –≤–æ–ø—Ä–æ—Å–æ–º.
    
    Args:
        model: –≠–∫–∑–µ–º–ø–ª—è—Ä SubmitModelWithMemory
        dialogue: –î–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∞ —Å –≤–æ–ø—Ä–æ—Å–æ–º
        output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """
    dialogue_id = dialogue['id']
    question = dialogue['question']
    answer = dialogue['answer']
    question_type = dialogue['question_type']
    sessions = dialogue['sessions']
    
    print(f"\nüìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞ {dialogue_id}")
    print(f"   –í–æ–ø—Ä–æ—Å: {question}")
    print(f"   –¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞: {question_type}")
    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π: {len(sessions)}")
    
    try:
        # 1. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –≤ –ø–∞–º—è—Ç—å
        print(f"   ‚Üí –ó–∞–ø–∏—Å—å –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –≤ –ø–∞–º—è—Ç—å...")
        total_messages = 0
        
        for session in sessions:
            session_id = session['id']
            messages = convert_to_messages(session['messages'])
            model.write_to_memory(messages, f"{dialogue_id}_{session_id}")
            total_messages += len(messages)
        
        print(f"   ‚úì –ó–∞–ø–∏—Å–∞–Ω–æ {total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {len(sessions)} —Å–µ—Å—Å–∏–π")
        
        # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ SubmitModelWithMemory
        print(f"   ‚Üí –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å...")
        
        try:
            # –í—ã–∑—ã–≤–∞–µ–º answer_to_question –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
            generated_answer = model.answer_to_question(dialogue_id, question)
            print(f"   ‚úì –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {generated_answer[:100]}...")
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            generated_answer = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}"
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
        result_text = f"–î–∏–∞–ª–æ–≥ {dialogue_id}:\n"
        result_text += f"–í–æ–ø—Ä–æ—Å: {question}\n"
        result_text += f"–¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞: {question_type}\n"
        result_text += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {answer}\n"
        result_text += f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {generated_answer}\n\n"
        result_text += f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ {len(sessions)} —Å–µ—Å—Å–∏–π:\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Å–µ—Å—Å–∏–π
        for session in sessions[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Å–µ—Å—Å–∏–π
            session_id = session['id']
            messages = convert_to_messages(session['messages'])
            result_text += f"\n--- –°–µ—Å—Å–∏—è {session_id} ---\n"
            for msg in messages[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è
                result_text += f"{msg.role}: {msg.content[:100]}...\n"
        
        if len(sessions) > 5:
            result_text += f"\n... –∏ –µ—â–µ {len(sessions) - 5} —Å–µ—Å—Å–∏–π\n"
        
        # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
        output_file = output_dir / f"dialogue_{dialogue_id}_question_answer.txt"
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(result_text)
        
        print(f"   ‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_file}")
        
        # 4. –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
        print(f"   ‚Üí –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏...")
        for session in sessions:
            session_id = session['id']
            model.clear_memory(f"{dialogue_id}_{session_id}")
        
        print(f"   ‚úì –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞ {dialogue_id}: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    print("üöÄ –°–ö–†–ò–ü–¢ –û–ë–†–ê–ë–û–¢–ö–ò –î–ò–ê–õ–û–ì–û–í")
    print("=" * 50)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    input_file = "data/format_example.jsonl"
    output_dir = Path("output_prompts")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    output_dir.mkdir(exist_ok=True)
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if not os.path.exists(input_file):
        print(f"‚ùå –§–∞–π–ª {input_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∞–ª–æ–≥–∏
    print(f"\nüìñ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤ –∏–∑ {input_file}...")
    dialogues = load_dialogues_from_json(input_file)
    
    if not dialogues:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∏–∞–ª–æ–≥–∏!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å –° –í–ï–°–ê–ú–ò (–Ω–æ –±–µ–∑ GigaChat)
    print(f"\nü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ —Å –≤–µ—Å–∞–º–∏...")
    
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å —Å –≤–µ—Å–∞–º–∏
        print("   ‚Üí –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SubmitModelWithMemory...")
        model = SubmitModelWithMemory(
            model_path="dummy_path",  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—É—Ç–∏ –º–æ–¥–µ–ª–∏
            weights_dir="src/submit/weights"
        )
        print("‚úì SubmitModelWithMemory –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –≤–µ—Å–∞–º–∏")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SubmitModelWithMemory: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:")
        print("   pip install faiss-cpu sentence-transformers rank-bm25 transformers")
        print("\nüîÑ –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –±–µ–∑ –≤–µ—Å–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
        
        # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –±–µ–∑ –≤–µ—Å–æ–≤
        class SimpleModelWithoutWeights:
            """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –≤–µ—Å–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
            
            def __init__(self):
                self.basic_memory = {}
                print("‚úì –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ (–±–µ–∑ –≤–µ—Å–æ–≤)")
            
            def write_to_memory(self, messages: List[Message], dialogue_id: str) -> None:
                """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å."""
                self.basic_memory[dialogue_id] = messages
                print(f"     ‚úì –ó–∞–ø–∏—Å–∞–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π (–±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ—Å–∞–º–∏)")
            
            def answer_to_question(self, dialogue_id: str, question: str) -> str:
                """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è answer_to_question."""
                return f"[–ó–ê–ì–õ–£–®–ö–ê] –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å '{question}' –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ {dialogue_id}. –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω—É–∂–Ω—ã –≤–µ—Å–∞ –∏ GigaChat."
            
            def clear_memory(self, dialogue_id: str) -> None:
                """–û—á–∏—â–∞–µ—Ç –ø–∞–º—è—Ç—å."""
                if dialogue_id in self.basic_memory:
                    del self.basic_memory[dialogue_id]
                print(f"     ‚úì –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞")
        
        model = SimpleModelWithoutWeights()
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –¥–∏–∞–ª–æ–≥
    print(f"\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(dialogues)} –¥–∏–∞–ª–æ–≥–æ–≤...")
    
    for i, dialogue in enumerate(dialogues, 1):
        print(f"\n{'='*60}")
        print(f"–î–ò–ê–õ–û–ì {i}/{len(dialogues)}")
        print(f"{'='*60}")
        
        process_dialogue(model, dialogue, output_dir)
    
    print(f"\nüéâ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {output_dir}")
    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–∏–∞–ª–æ–≥–æ–≤: {len(dialogues)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    output_files = list(output_dir.glob("*.txt"))
    print(f"üìÑ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(output_files)}")
    
    if output_files:
        print("\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        for file in sorted(output_files):
            print(f"   ‚Ä¢ {file.name}")


if __name__ == "__main__":
    main()
