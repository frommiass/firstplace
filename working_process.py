#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤ - –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø
"""
import json
import sys
import os
from pathlib import Path
from typing import List, Dict, Any

# –û—Ç–∫–ª—é—á–∞–µ–º GPU –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
os.environ['CUDA_VISIBLE_DEVICES'] = ''
print("üîß GPU –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã")

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('src')

from submit.interfaces import Message
from submit.model_inference import SubmitModelWithMemory

def load_dialogues_from_json(file_path: str) -> List[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∏–∞–ª–æ–≥–∏ –∏–∑ JSONL —Ñ–∞–π–ª–∞."""
    dialogues = []
    
    with open(file_path, 'r', encoding='utf-8') as f:
        for line_num, line in enumerate(f, 1):
            line = line.strip()
            if not line:
                continue
            
            try:
                data = json.loads(line)
                if isinstance(data, dict) and 'question' in data and 'sessions' in data:
                    dialogues.append(data)
            except json.JSONDecodeError as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ {line_num}: {e}")
                continue
    
    print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(dialogues)} –¥–∏–∞–ª–æ–≥–æ–≤")
    return dialogues

def convert_to_messages(dialogue_messages: List[Dict]) -> List[Message]:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –≤ –æ–±—ä–µ–∫—Ç—ã Message."""
    messages = []
    for msg in dialogue_messages:
        message = Message(
            content=msg.get('content', ''),
            role=msg.get('role', 'user'),
            session_id=str(msg.get('session_id', 'unknown'))
        )
        messages.append(message)
    
    return messages

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    print("üöÄ –†–ê–ë–û–ß–ò–ô –°–ö–†–ò–ü–¢ –û–ë–†–ê–ë–û–¢–ö–ò –î–ò–ê–õ–û–ì–û–í")
    print("=" * 50)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    input_file = "data/format_example.jsonl"
    output_dir = Path("output_working")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    output_dir.mkdir(exist_ok=True)
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {output_dir}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
    if not os.path.exists(input_file):
        print(f"‚ùå –§–∞–π–ª {input_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∞–ª–æ–≥–∏
    print(f"\nüìñ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤...")
    dialogues = load_dialogues_from_json(input_file)
    
    if not dialogues:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∏–∞–ª–æ–≥–∏!")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
    print(f"\nü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏...")
    model = SubmitModelWithMemory(
        model_path="dummy_path",
        weights_dir="src/submit/weights"
    )
    print("‚úì –ú–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –¥–∏–∞–ª–æ–≥–∞
    dialogues_to_process = dialogues[:3]
    print(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(dialogues_to_process)} –¥–∏–∞–ª–æ–≥–æ–≤...")
    
    for i, dialogue in enumerate(dialogues_to_process, 1):
        print(f"\n{'='*60}")
        print(f"–î–ò–ê–õ–û–ì {i}/{len(dialogues_to_process)}: {dialogue['id']}")
        print(f"{'='*60}")
        
        dialogue_id = dialogue['id']
        question = dialogue['question']
        correct_answer = dialogue['ans']
        
        print(f"–í–æ–ø—Ä–æ—Å: {question}")
        print(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")
        
        try:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–∞–º—è—Ç—å
            print(f"\n[1/3] –ó–∞–ø–∏—Å—å –≤ –ø–∞–º—è—Ç—å...")
            total_messages = 0
            
            for session in dialogue['sessions']:
                messages = convert_to_messages(session['messages'])
                model.write_to_memory(messages, dialogue_id)
                total_messages += len(messages)
            
            print(f"‚úì –ó–∞–ø–∏—Å–∞–Ω–æ {total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –ü–æ–∏—Å–∫
            print(f"\n[2/3] –ü–æ–∏—Å–∫...")
            search_results = model.search_engine.search(
                question=question,
                dialogue_id=dialogue_id,
                top_k=10
            )
            
            print(f"‚úì –ù–∞–π–¥–µ–Ω–æ {len(search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if search_results:
                print(f"\nüìã –¢–æ–ø-3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
                for j, result in enumerate(search_results[:3], 1):
                    print(f"   {j}. Score: {result.final_score:.3f}")
                    print(f"      Content: {result.chunk.content[:80]}...")
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            print(f"\n[3/3] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞...")
            try:
                generated_answer = model.answer_to_question(dialogue_id, question)
                print(f"‚úì –û—Ç–≤–µ—Ç: {generated_answer}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
                generated_answer = f"–û—à–∏–±–∫–∞: {e}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_text = f"–î–∏–∞–ª–æ–≥ {dialogue_id}:\n"
            result_text += f"–í–æ–ø—Ä–æ—Å: {question}\n"
            result_text += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}\n"
            result_text += f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {generated_answer}\n"
            result_text += f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(search_results)}\n\n"
            
            if search_results:
                result_text += "–¢–û–ü-10 –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:\n"
                for j, result in enumerate(search_results[:10], 1):
                    result_text += f"{j}. Score: {result.final_score:.3f}\n"
                    result_text += f"   Content: {result.chunk.content[:100]}...\n\n"
            
            output_file = output_dir / f"dialogue_{dialogue_id}_working.txt"
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(result_text)
            
            print(f"‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
            
            # –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
            print(f"\nüßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏...")
            model.clear_memory(dialogue_id)
            print(f"‚úì –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞ {dialogue_id}: {e}")
            import traceback
            traceback.print_exc()
    
    print(f"\nüéâ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤: {output_dir}")

if __name__ == "__main__":
    main()
