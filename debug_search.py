#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–∏—Å–∫–∞ - –ü–†–û–í–ï–†–Ø–ï–ú –ö–ê–ö–ò–ï –ß–ê–ù–ö–ò –°–û–ó–î–ê–Æ–¢–°–Ø
"""
import json
import sys
import os

os.environ['CUDA_VISIBLE_DEVICES'] = ''
sys.path.append('src')

from submit.interfaces import Message
from submit.model_inference import SubmitModelWithMemory

def load_dialogues_from_json(file_path: str):
    dialogues = []
    with open(file_path, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if not line:
                continue
            try:
                data = json.loads(line)
                if isinstance(data, dict) and 'question' in data and 'sessions' in data:
                    dialogues.append(data)
            except:
                continue
    return dialogues

def convert_to_messages_safe(dialogue_messages):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–±—ä–µ–∫—Ç—ã Message.
    
    –ò–°–ü–†–ê–í–õ–ï–ù–û: content –º–æ–∂–µ—Ç –±—ã—Ç—å float, int, None
    """
    messages = []
    for msg in dialogue_messages:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è content
        content = msg.get('content', '')
        if content is None:
            content = ''
        content = str(content)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ª—é–±–æ–π —Ç–∏–ø –≤ —Å—Ç—Ä–æ–∫—É
        
        message = Message(
            content=content,
            role=msg.get('role', 'user'),
            session_id=str(msg.get('session_id', 'unknown'))
        )
        messages.append(message)
    
    return messages

def main():
    print("üîç –û–¢–õ–ê–î–ö–ê –ü–û–ò–°–ö–ê - –ü–†–û–í–ï–†–ö–ê –ß–ê–ù–ö–û–í")
    print("=" * 80)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞
    dialogues = load_dialogues_from_json("data/format_example.jsonl")
    dialogue = dialogues[0]
    dialogue_id = dialogue['id']
    question = dialogue['question']
    correct_answer = dialogue['ans']
    
    print(f"\n–î–∏–∞–ª–æ–≥: {dialogue_id}")
    print(f"–í–æ–ø—Ä–æ—Å: {question}")
    print(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    print(f"\nü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏...")
    model = SubmitModelWithMemory(
        model_path="dummy_path",
        weights_dir="src/submit/weights"
    )
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–∞–º—è—Ç—å
    print(f"\nüìù –ó–∞–ø–∏—Å—å –≤ –ø–∞–º—è—Ç—å...")
    for session in dialogue['sessions']:
        messages = convert_to_messages(session['messages'])
        model.write_to_memory(messages, dialogue_id)
    
    # Flush
    if dialogue_id in model.write_buffer:
        model._flush_buffer(dialogue_id)
    
    # ===================================================================
    # –ü–†–û–í–ï–†–ö–ê 1: –ö–∞–∫–∏–µ —á–∞–Ω–∫–∏ —Å–æ–∑–¥–∞–ª–∏—Å—å?
    # ===================================================================
    print(f"\n{'='*80}")
    print(f"üìä –ê–ù–ê–õ–ò–ó –°–û–ó–î–ê–ù–ù–´–• –ß–ê–ù–ö–û–í")
    print(f"{'='*80}")
    
    if dialogue_id in model.search_engine.dialogue_chunks:
        chunks = model.search_engine.dialogue_chunks[dialogue_id]
        print(f"\n–í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤: {len(chunks)}")
        
        # –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —á–∞–Ω–∫–∏ –≤—Ä—É—á–Ω—É—é
        print(f"\nüîç –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: —Ñ—É—Ç–±–æ–ª, –ø–∏–Ω–≥-–ø–æ–Ω–≥, —Å–ø–æ—Ä—Ç")
        
        relevant_chunks = []
        for i, chunk in enumerate(chunks):
            content_lower = chunk.content.lower()
            
            # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            keywords = ['—Ñ—É—Ç–±–æ–ª', '–ø–∏–Ω–≥-–ø–æ–Ω–≥', '–ø–∏–Ω–≥', '–ø–æ–Ω–≥', '—Å–ø–æ—Ä—Ç', 
                       '–∏–≥—Ä–∞—é', '–∑–∞–Ω–∏–º–∞—é—Å—å', '—Ç—Ä–µ–Ω–∏—Ä']
            
            if any(kw in content_lower for kw in keywords):
                relevant_chunks.append((i, chunk))
        
        print(f"\n–ù–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ –≤—Ä—É—á–Ω—É—é: {len(relevant_chunks)}")
        
        if relevant_chunks:
            print(f"\nüìã –¢–û–ü-10 –†–ï–õ–ï–í–ê–ù–¢–ù–´–• –ß–ê–ù–ö–û–í (–ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º):")
            for rank, (idx, chunk) in enumerate(relevant_chunks[:10], 1):
                print(f"\n{rank}. –ß–∞–Ω–∫ #{idx}")
                print(f"   –†–æ–ª—å: {chunk.role}")
                print(f"   –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {chunk.content}")
                if chunk.metadata:
                    print(f"   –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: index={chunk.metadata.get('index')}, "
                          f"has_fact={chunk.metadata.get('has_fact')}")
        else:
            print("\n‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û –†–ï–õ–ï–í–ê–ù–¢–ù–´–• –ß–ê–ù–ö–û–í!")
            print("\n–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —á–∞–Ω–∫–æ–≤:")
            for i, chunk in enumerate(chunks[:10], 1):
                print(f"\n{i}. {chunk.content[:100]}...")
    
    # ===================================================================
    # –ü–†–û–í–ï–†–ö–ê 2: –ß—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç SearchEngine?
    # ===================================================================
    print(f"\n{'='*80}")
    print(f"üîé –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê –ß–ï–†–ï–ó SEARCHENGINE")
    print(f"{'='*80}")
    
    # –ü–æ–∏—Å–∫ —Å —Ä–∞–∑–Ω—ã–º–∏ top_k
    for top_k in [10, 50, 100]:
        print(f"\nüîç –ü–æ–∏—Å–∫ —Å top_k={top_k}:")
        
        search_results = model.search_engine.search(
            question=question,
            dialogue_id=dialogue_id,
            top_k=top_k
        )
        
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        if search_results:
            print(f"   –õ—É—á—à–∏–π score: {search_results[0].final_score:.4f}")
            print(f"   –•—É–¥—à–∏–π score: {search_results[-1].final_score:.4f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ
            relevant_found = 0
            for result in search_results:
                content_lower = result.chunk.content.lower()
                if any(kw in content_lower for kw in ['—Ñ—É—Ç–±–æ–ª', '–ø–∏–Ω–≥', '—Å–ø–æ—Ä—Ç']):
                    relevant_found += 1
            
            print(f"   –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö: {relevant_found}/{len(search_results)}")
            
            # –¢–æ–ø-5
            if top_k == 50:
                print(f"\n   –¢–û–ü-5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
                for i, result in enumerate(search_results[:5], 1):
                    is_relevant = any(kw in result.chunk.content.lower() 
                                     for kw in ['—Ñ—É—Ç–±–æ–ª', '–ø–∏–Ω–≥', '—Å–ø–æ—Ä—Ç'])
                    marker = "‚úì" if is_relevant else "‚úó"
                    print(f"   {i}. {marker} [score={result.final_score:.4f}] "
                          f"{result.chunk.content[:80]}...")
    
    # ===================================================================
    # –ü–†–û–í–ï–†–ö–ê 3: –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥
    # ===================================================================
    print(f"\n{'='*80}")
    print(f"üìä –ê–ù–ê–õ–ò–ó –ü–û–†–û–ì–ê NO_INFO")
    print(f"{'='*80}")
    
    search_results = model.search_engine.search(
        question=question,
        dialogue_id=dialogue_id,
        top_k=50
    )
    
    if search_results:
        threshold = model.search_engine.calculate_adaptive_threshold(search_results)
        best_score = search_results[0].final_score
        
        print(f"\n–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥: {threshold:.4f}")
        print(f"–õ—É—á—à–∏–π score: {best_score:.4f}")
        print(f"–ü–æ—Ä–æ–≥ –ø—Ä–µ–≤—ã—à–µ–Ω: {'‚úì –î–ê' if best_score >= threshold else '‚úó –ù–ï–¢'}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–æ—Ä–æ–≤
        scores = [r.final_score for r in search_results]
        import numpy as np
        print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–æ—Ä–æ–≤:")
        print(f"   Mean: {np.mean(scores):.4f}")
        print(f"   Median: {np.median(scores):.4f}")
        print(f"   Std: {np.std(scores):.4f}")
        print(f"   Min: {np.min(scores):.4f}")
        print(f"   Max: {np.max(scores):.4f}")
    
    # ===================================================================
    # –ü–†–û–í–ï–†–ö–ê 4: –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –≤–æ–ø—Ä–æ—Å–∞
    # ===================================================================
    print(f"\n{'='*80}")
    print(f"üßÆ –ê–ù–ê–õ–ò–ó –≠–ú–ë–ï–î–î–ò–ù–ì–û–í")
    print(f"{'='*80}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –∫–∞–∂–¥—ã–π —ç–º–±–µ–¥–¥–µ—Ä
    for emb_name, embedder in model.search_engine.embeddings.items():
        if embedder is None:
            continue
        
        try:
            question_emb = embedder.encode([question], show_progress_bar=False)[0]
            print(f"\n{emb_name}:")
            print(f"   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {question_emb.shape}")
            print(f"   –ù–æ—Ä–º–∞: {np.linalg.norm(question_emb):.4f}")
            print(f"   Min/Max: [{question_emb.min():.4f}, {question_emb.max():.4f}]")
        except Exception as e:
            print(f"\n{emb_name}: ‚ùå –û—à–∏–±–∫–∞ - {e}")
    
    print(f"\n{'='*80}")
    print(f"‚úÖ –û–¢–õ–ê–î–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print(f"{'='*80}")

if __name__ == "__main__":
    main()
